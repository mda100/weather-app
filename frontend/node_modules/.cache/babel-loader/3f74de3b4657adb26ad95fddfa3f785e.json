{"ast":null,"code":"var _jsxFileName = \"/Users/martinadams/Desktop/weather-app/frontend/src/App.js\";\n// the app broke when i made \"weather\" the entire json file, unsure how to access it - maybe consolelog?\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction apiBuilder(location, days) {\n  //days req. ? 4>x>1\n  return `http://api.weatherapi.com/v1/forecast.json?key=ba47e033e3c54cd5b8720248211507&q=${location}&days=${days}&aqi=yes&alerts=no`;\n}\n\nfunction Location(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", props.data.display_location.name, \", \", props.data.display_location.region, \", \", props.data.display_location.country, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this);\n} //\"display\" data so location refresh onclick not on input\n\n\n_c = Location;\n\nfunction Current(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", props.data.current.temp_f, \" Degrees Fahrenheit and \", props.data.current.avghumidity, \"% Humidity\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = Current;\n\nfunction Forecast(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Date: \", props.data.forecast.forecastday[0].date, \"Max: \", props.data.forecast.forecastday[0].day.mintemp_f, \"Min: \", props.data.forecast.forecastday[0].day.mintemp_f, \"Avg. Humidity: \", props.data.forecast.forecastday[0].day.avghumidity]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Date: \", props.data.forecast.forecastday[1].date, \"Max: \", props.data.forecast.forecastday[1].day.mintemp_f, \"Min: \", props.data.forecast.forecastday[1].day.mintemp_f, \"Avg. Humidity: \", props.data.forecast.forecastday[1].day.avghumidity]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Date: \", props.data.forecast.forecastday[2].date, \"Max: \", props.data.forecast.forecastday[2].day.mintemp_f, \"Min: \", props.data.forecast.forecastday[2].day.mintemp_f, \"Avg. Humidity: \", props.data.forecast.forecastday[2].day.avghumidity]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 10\n  }, this);\n}\n\n_c3 = Forecast;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: \"\",\n      apiKey: \"ba47e033e3c54cd5b8720248211507\",\n      apiUrl: \"http://api.weatherapi.com/v1/\",\n      //data structure same as api json\n      display_location: {\n        name: \"Oakland\",\n        region: \"CA\",\n        country: \"USA\"\n      },\n      current: {\n        temp_f: \"\",\n        humidity: \"\"\n      },\n      forecast: {\n        forecastday: [{\n          date: \"\",\n          day: {\n            mintemp_f: \"\",\n            maxtemp_f: \"\",\n            avghumidity: \"\",\n            condition: {\n              text: \"\"\n            }\n          }\n        }, {\n          date: \"\",\n          day: {\n            mintemp_f: \"\",\n            maxtemp_f: \"\",\n            avghumidity: \"\",\n            condition: {\n              text: \"\"\n            }\n          }\n        }, {\n          date: \"\",\n          day: {\n            mintemp_f: \"\",\n            maxtemp_f: \"\",\n            avghumidity: \"\",\n            condition: {\n              text: \"\"\n            }\n          }\n        }]\n      } // weather: [] //full api response, see https://www.weatherapi.com/api-explorer.aspx#forecast\n\n    };\n\n    this.handleClick = () => {\n      fetch(apiBuilder(this.state.location, 3)).then(res => res.json()).then(data => this.setState({\n        display_location: {\n          name: data.location.name,\n          region: data.location.region,\n          country: data.location.country\n        },\n        current: {\n          temp_f: data.current.temp_f,\n          humidity: data.current.humidity\n        },\n        forecast: {\n          forecastday: [{\n            date: data.forecast.forecastday[0].date,\n            day: {\n              mintemp_f: data.forecast.forecastday[0].day.mintemp_f,\n              maxtemp_f: data.forecast.forecastday[0].day.maxtemp_f,\n              avghumidity: data.forecast.forecastday[0].day.avghumidity,\n              condition: {\n                text: data.forecast.forecastday[0].day.condition.text\n              }\n            }\n          }, {\n            date: data.forecast.forecastday[1].date,\n            day: {\n              mintemp_f: data.forecast.forecastday[1].day.mintemp_f,\n              maxtemp_f: data.forecast.forecastday[1].day.maxtemp_f,\n              avghumidity: data.forecast.forecastday[1].day.avghumidity,\n              condition: {\n                text: data.forecast.forecastday[1].day.condition.text\n              }\n            }\n          }, {\n            date: data.forecast.forecastday[2].date,\n            day: {\n              mintemp_f: data.forecast.forecastday[2].day.mintemp_f,\n              maxtemp_f: data.forecast.forecastday[2].day.maxtemp_f,\n              avghumidity: data.forecast.forecastday[2].day.avghumidity,\n              condition: {\n                text: data.forecast.forecastday[2].day.condition.text\n              }\n            }\n          }]\n        }\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Location, {\n        data: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this), \"please enter city name, coordinates, or US/UK zip code:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        required: true,\n        value: this.state.location,\n        onChange: e => this.setState({\n          location: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleClick(),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Current, {\n        data: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Location\");\n$RefreshReg$(_c2, \"Current\");\n$RefreshReg$(_c3, \"Forecast\");","map":{"version":3,"sources":["/Users/martinadams/Desktop/weather-app/frontend/src/App.js"],"names":["React","apiBuilder","location","days","Location","props","data","display_location","name","region","country","Current","current","temp_f","avghumidity","Forecast","forecast","forecastday","date","day","mintemp_f","App","Component","constructor","state","apiKey","apiUrl","humidity","maxtemp_f","condition","text","handleClick","fetch","then","res","json","setState","render","e","target","value"],"mappings":"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","sourcesContent":["// the app broke when i made \"weather\" the entire json file, unsure how to access it - maybe consolelog?\nimport React from 'react';\n\nfunction apiBuilder(location, days){\n  //days req. ? 4>x>1\n  return `http://api.weatherapi.com/v1/forecast.json?key=ba47e033e3c54cd5b8720248211507&q=${location}&days=${days}&aqi=yes&alerts=no`;\n}\n\nfunction Location(props){\n  return <div> {props.data.display_location.name}, {props.data.display_location.region}, {props.data.display_location.country} </div>;\n}\n//\"display\" data so location refresh onclick not on input\nfunction Current(props){\n  return <div> {props.data.current.temp_f} Degrees Fahrenheit and {props.data.current.avghumidity}% Humidity</div>\n}\n\nfunction Forecast(props){\n  return <div className = \"grid-row\">\n    <div>\n      Date: {props.data.forecast.forecastday[0].date}\n      Max: {props.data.forecast.forecastday[0].day.mintemp_f}\n      Min: {props.data.forecast.forecastday[0].day.mintemp_f}\n      Avg. Humidity: {props.data.forecast.forecastday[0].day.avghumidity}\n    </div>\n    <div>\n      Date: {props.data.forecast.forecastday[1].date}\n      Max: {props.data.forecast.forecastday[1].day.mintemp_f}\n      Min: {props.data.forecast.forecastday[1].day.mintemp_f}\n      Avg. Humidity: {props.data.forecast.forecastday[1].day.avghumidity}\n    </div>\n    <div>\n    Date: {props.data.forecast.forecastday[2].date}\n      Max: {props.data.forecast.forecastday[2].day.mintemp_f}\n      Min: {props.data.forecast.forecastday[2].day.mintemp_f}\n      Avg. Humidity: {props.data.forecast.forecastday[2].day.avghumidity}\n    </div>\n  </div>\n}\n\nclass App extends React.Component {\n\n  constructor(props){\n\n    super(props);\n\n    this.state = {\n      location: \"\",\n      apiKey: \"ba47e033e3c54cd5b8720248211507\",\n      apiUrl: \"http://api.weatherapi.com/v1/\",\n\n      //data structure same as api json\n\n      display_location:{\n        name:\"Oakland\",\n        region: \"CA\",\n        country: \"USA\"\n      },\n      current:{\n        temp_f: \"\",\n        humidity: \"\"\n      },\n      forecast:{\n        forecastday:[\n          {\n            date: \"\",\n            day:{\n              mintemp_f: \"\",\n              maxtemp_f: \"\",\n              avghumidity: \"\",\n              condition:{\n                text: \"\"\n              }\n            }\n          },\n          {\n            date: \"\",\n            day:{\n              mintemp_f: \"\",\n              maxtemp_f: \"\",\n              avghumidity: \"\",\n              condition:{\n                text: \"\"\n              }\n            }\n          },\n          {\n            date: \"\",\n            day:{\n              mintemp_f: \"\",\n              maxtemp_f: \"\",\n              avghumidity: \"\",\n              condition:{\n                text: \"\"\n              }\n            }\n          },\n        ]\n      }\n\n      // weather: [] //full api response, see https://www.weatherapi.com/api-explorer.aspx#forecast\n      \n    };\n\n    this.handleClick = () => {\n\n      fetch(apiBuilder(this.state.location, 3)) \n        .then(res => res.json())\n        .then(data => this.setState({\n          display_location:{\n            name: data.location.name,\n            region: data.location.region,\n            country: data.location.country,\n          },\n          current:{\n            temp_f: data.current.temp_f,\n            humidity: data.current.humidity\n          },\n          forecast:{\n            forecastday:[\n              {\n                date: data.forecast.forecastday[0].date,\n                day:{\n                  mintemp_f: data.forecast.forecastday[0].day.mintemp_f,\n                  maxtemp_f: data.forecast.forecastday[0].day.maxtemp_f,\n                  avghumidity: data.forecast.forecastday[0].day.avghumidity,\n                  condition: {\n                    text: data.forecast.forecastday[0].day.condition.text,\n                  }\n                }\n              },\n              {\n                date: data.forecast.forecastday[1].date,\n                day:{\n                  mintemp_f: data.forecast.forecastday[1].day.mintemp_f,\n                  maxtemp_f: data.forecast.forecastday[1].day.maxtemp_f,\n                  avghumidity: data.forecast.forecastday[1].day.avghumidity,\n                  condition: {\n                    text: data.forecast.forecastday[1].day.condition.text,\n                  }\n                }\n              },\n              {\n                date: data.forecast.forecastday[2].date,\n                day:{\n                  mintemp_f: data.forecast.forecastday[2].day.mintemp_f,\n                  maxtemp_f: data.forecast.forecastday[2].day.maxtemp_f,\n                  avghumidity: data.forecast.forecastday[2].day.avghumidity,\n                  condition: {\n                    text: data.forecast.forecastday[2].day.condition.text,\n                  }\n                }\n              },\n            ]\n          }\n        }))\n       }\n\n  }\n  render(){\n    return <div>\n            <Location data={this.state}/>\n            please enter city name, coordinates, or US/UK zip code:\n            <input\n              type=\"text\"\n              required\n              value={this.state.location}\n              onChange ={(e) => this.setState({location: e.target.value})} \n              /> \n            <button \n              onClick= {() => this.handleClick()}>\n                Submit\n            </button>\n            <Current data={this.state}/>\n      </div>\n  }\n}\n\n\nexport default App;\n\n\n\n"]},"metadata":{},"sourceType":"module"}